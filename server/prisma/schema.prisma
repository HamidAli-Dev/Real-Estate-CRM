generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id               String   @id @default(uuid())
  name             String
  domain           String? // Made optional since we're removing domain requirement
  subscriptionPlan String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  users         UserWorkspace[]
  properties    Property[]
  leads         Lead[]
  deals         Deal[]
  activities    Activity[]
  files         File[]
  categories    PropertyCategory[]
  notifications Notification[]
  settings      WorkspaceSettings?
  subscription  Subscription?
  PipelineStage PipelineStage[]
  invitations   UserInvitation[]
}

model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  password String?

  workspaces    UserWorkspace[]
  properties    Property[]       @relation("ListedBy")
  leads         Lead[]           @relation("AssignedTo")
  activities    Activity[]
  notifications Notification[]
  RefreshToken  RefreshToken[]
  invitations   UserInvitation[] @relation("InvitedBy")
}

model PipelineStage {
  id          String    @id @default(uuid())
  name        String // e.g., "New", "Contacted", "Negotiation"
  order       Int // for sorting stages in Kanban
  color       String? // optional: UI label color
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  leads       Lead[] // all leads in this stage
  deals       Deal[] // all deals in this stage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserWorkspace {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId String
  role        Role
  status      UserStatus       @default(PENDING)
  permissions RolePermission[] // Add permissions relationship
  invitation  UserInvitation? // Link to invitation if user was invited

  @@unique([userId, workspaceId])
}

enum Role {
  Owner
  Admin
  Manager
  Agent
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

// New model for role permissions
model RolePermission {
  id              String        @id @default(uuid())
  userWorkspace   UserWorkspace @relation(fields: [userWorkspaceId], references: [id], onDelete: Cascade)
  userWorkspaceId String
  permission      Permission
  createdAt       DateTime      @default(now())

  @@unique([userWorkspaceId, permission])
}

// Model for user invitations
model UserInvitation {
  id              String           @id @default(uuid())
  email           String
  name            String
  role            Role
  permissions     String[] // Store permissions as array of strings
  token           String           @unique
  expiresAt       DateTime
  status          InvitationStatus @default(PENDING)
  userWorkspace   UserWorkspace?   @relation(fields: [userWorkspaceId], references: [id], onDelete: Cascade)
  userWorkspaceId String?          @unique // Will be set when invitation is accepted
  invitedBy       User             @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([email, workspaceId]) // One invitation per email per workspace
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum Permission {
  // Property permissions
  VIEW_PROPERTIES
  CREATE_PROPERTIES
  EDIT_PROPERTIES
  DELETE_PROPERTIES

  // Lead permissions
  VIEW_LEADS
  CREATE_LEADS
  EDIT_LEADS
  DELETE_LEADS

  // Deal permissions
  VIEW_DEALS
  CREATE_DEALS
  EDIT_DEALS
  DELETE_DEALS

  // User management permissions
  VIEW_USERS
  INVITE_USERS
  EDIT_USER_ROLES
  REMOVE_USERS

  // Workspace settings
  VIEW_SETTINGS
  EDIT_SETTINGS

  // Analytics and reports
  VIEW_ANALYTICS
  EXPORT_REPORTS
}

model PropertyCategory {
  id          String     @id @default(uuid())
  category    Category
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String
  properties  Property[]
}

enum Category {
  House
  Apartment
  Land
  Commercial
  Villa
  Townhouse
}

model Property {
  id            String           @id @default(uuid())
  title         String
  description   String?
  location      String
  city          String
  address       String?
  price         Float
  size          Float? // in sq ft
  bedrooms      Int?
  bathrooms     Int?
  status        PropertyStatus
  purpose       PropertyPurpose
  propertyType  PropertyType
  listedBy      User             @relation("ListedBy", fields: [listedById], references: [id])
  listedById    String
  workspace     Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  category      PropertyCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  images        PropertyImage[]
  leadLinks     LeadProperty[]
  // New wizard fields
  yearBuilt     Int?
  parkingSpaces Int?
  features      String[] // Array of strings for property features
  zipCode       String?
  state         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum PropertyStatus {
  Available
  Pending
  Sold
  Under_Offer
  Rented
}

enum PropertyPurpose {
  forSale
  forRent
}

enum PropertyType {
  House
  Apartment
  Land
  Commercial
  Villa
  Townhouse
  Office
  Shop
  Warehouse
}

// New model for property images
model PropertyImage {
  id         String   @id @default(uuid())
  url        String
  alt        String?
  order      Int      @default(0) // for ordering images
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
}

model Lead {
  id              String         @id @default(uuid())
  name            String
  contactInfo     String
  phone           String? // Phone number field
  pipelineStage   PipelineStage  @relation(fields: [pipelineStageId], references: [id])
  pipelineStageId String
  assignedTo      User           @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId    String
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  deal            Deal?
  activities      Activity[]
  properties      LeadProperty[]
  notes           String?
  source          LeadSource?
  priority        LeadPriority?  @default(Warm)
  budget          Float? // Budget field (optional)
  tags            String[] // Tags as array of strings
  position        Int            @default(0) // Position within stage for ordering
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastContactedAt DateTime?
}

enum LeadSource {
  Website
  Referral
  Social
  Cold
}

enum LeadPriority {
  Hot
  Warm
  Cold
}

model Deal {
  id              String        @id @default(uuid())
  pipelineStage   PipelineStage @relation(fields: [pipelineStageId], references: [id])
  pipelineStageId String
  workspace       Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  lead            Lead          @relation(fields: [leadId], references: [id])
  leadId          String        @unique
}

model Activity {
  id          String         @id @default(uuid())
  type        ActivityType
  scheduledAt DateTime
  status      ActivityStatus
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  lead        Lead           @relation(fields: [leadId], references: [id])
  leadId      String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

enum ActivityType {
  Call
  Email
  Meeting
  Visit
}

enum ActivityStatus {
  Pending
  Completed
}

model File {
  id          String     @id @default(uuid())
  url         String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
  createdAt   DateTime   @default(now())
}

model LeadProperty {
  id         String   @id @default(uuid())
  lead       Lead     @relation(fields: [leadId], references: [id])
  leadId     String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@unique([leadId, propertyId])
}

model Notification {
  id           String    @id @default(uuid())
  notification String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WorkspaceSettings {
  id                  String    @id @default(uuid())
  workspace           Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId         String    @unique
  onboardingCompleted Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Subscription {
  id                   String     @id @default(cuid())
  workspaceId          String?    @unique
  workspace            Workspace? @relation(fields: [workspaceId], references: [id])
  planId               String?
  plan                 Plan?      @relation(fields: [planId], references: [id])
  isActive             Boolean    @default(true)
  customerId           String?
  subscriptionId       String?
  currentPeriodEndDate DateTime?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

enum PlanType {
  Basic
  Standard
  Pro
}

enum PlanDuration {
  monthly
  yearly
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  price         Float
  duration      PlanDuration
  features      String[] // array of feature names
  stripePriceId String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
