generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id               String   @id @default(uuid())
  name             String
  subscriptionPlan String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  users                UserWorkspace[]
  roles                Role[] // Workspace-specific roles
  properties           Property[]
  leads                Lead[]
  deals                Deal[]
  activities           Activity[]
  files                File[]
  categories           PropertyCategory[]
  notifications        Notification[]
  settings             WorkspaceSettings?
  subscription         Subscription?
  PipelineStage        PipelineStage[]
  invitations          UserInvitation[]
  notificationSettings WorkspaceNotificationSettings?
  chatMessages         ChatMessage[]
}

model User {
  id                 String  @id @default(uuid())
  name               String
  email              String  @unique
  password           String?
  mustUpdatePassword Boolean @default(false) // temp password flag

  workspaces              UserWorkspace[]
  properties              Property[]                   @relation("ListedBy")
  leads                   Lead[]                       @relation("AssignedTo")
  activities              Activity[]
  notifications           Notification[]
  RefreshToken            RefreshToken[]
  invitations             UserInvitation[]             @relation("InvitedBy")
  triggeredNotifications  Notification[]               @relation("NotificationTriggeredBy")
  notificationPreferences UserNotificationPreferences?

  // Chat relations
  sentMessages     ChatMessage[]
  receivedMessages ChatMessage[] @relation("ReceivedMessages")
}

model PipelineStage {
  id          String    @id @default(uuid())
  name        String // e.g., "New", "Contacted", "Negotiation"
  order       Int // for sorting stages in Kanban
  color       String? // optional: UI label color
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  leads       Lead[] // all leads in this stage
  deals       Deal[] // all deals in this stage

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserWorkspace {
  id          String          @id @default(uuid())
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId String
  role        Role            @relation(fields: [roleId], references: [id])
  roleId      String
  status      UserStatus      @default(PENDING)
  invitation  UserInvitation?

  @@unique([userId, workspaceId])
}

model Role {
  id          String    @id @default(uuid())
  name        String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  isSystem    Boolean   @default(false) // true = Owner
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  rolePermissions RolePermission[]
  userWorkspaces  UserWorkspace[]
  UserInvitation  UserInvitation[]
}

model Permission {
  id        String   @id @default(uuid())
  name      String   @unique // e.g. "CREATE_PROPERTY"
  group     String? // optional for grouping in UI
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rolePermissions RolePermission[]
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

// New model for role permissions
model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

// Model for user invitations
model UserInvitation {
  id              String           @id @default(uuid())
  email           String
  name            String
  token           String           @unique
  expiresAt       DateTime
  status          InvitationStatus @default(PENDING)
  invitedBy       User             @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  role            Role             @relation(fields: [roleId], references: [id])
  roleId          String
  userWorkspace   UserWorkspace?   @relation(fields: [userWorkspaceId], references: [id], onDelete: Cascade)
  userWorkspaceId String?          @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, workspaceId]) // One invitation per email per workspace
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

model PropertyCategory {
  id          String     @id @default(uuid())
  category    Category
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId String
  properties  Property[]
}

enum Category {
  House
  Apartment
  Land
  Commercial
  Villa
  Townhouse
}

model Property {
  id            String           @id @default(uuid())
  title         String
  description   String?
  location      String
  city          String
  address       String?
  price         Float
  size          Float? // in sq ft
  bedrooms      Int?
  bathrooms     Int?
  status        PropertyStatus
  purpose       PropertyPurpose
  propertyType  PropertyType
  listedBy      User             @relation("ListedBy", fields: [listedById], references: [id])
  listedById    String
  workspace     Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  category      PropertyCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  images        PropertyImage[]
  leadLinks     LeadProperty[]
  // New wizard fields
  yearBuilt     Int?
  parkingSpaces Int?
  features      String[] // Array of strings for property features
  zipCode       String?
  state         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum PropertyStatus {
  Available
  Pending
  Sold
  Under_Offer
  Rented
}

enum PropertyPurpose {
  forSale
  forRent
}

enum PropertyType {
  House
  Apartment
  Land
  Commercial
  Villa
  Townhouse
  Office
  Shop
  Warehouse
}

// New model for property images
model PropertyImage {
  id         String   @id @default(uuid())
  url        String
  alt        String?
  order      Int      @default(0) // for ordering images
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
}

model Lead {
  id              String         @id @default(uuid())
  name            String
  contactInfo     String
  phone           String? // Phone number field
  pipelineStage   PipelineStage  @relation(fields: [pipelineStageId], references: [id])
  pipelineStageId String
  assignedTo      User           @relation("AssignedTo", fields: [assignedToId], references: [id])
  assignedToId    String
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  deal            Deal?
  activities      Activity[]
  properties      LeadProperty[]
  notes           String?
  source          LeadSource?
  priority        LeadPriority?  @default(Warm)
  budget          Float? // Budget field (optional)
  tags            String[] // Tags as array of strings
  position        Int            @default(0) // Position within stage for ordering
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  lastContactedAt DateTime?
}

enum LeadSource {
  Website
  Referral
  Social
  Cold
}

enum LeadPriority {
  Hot
  Warm
  Cold
}

model Deal {
  id              String        @id @default(uuid())
  pipelineStage   PipelineStage @relation(fields: [pipelineStageId], references: [id])
  pipelineStageId String
  workspace       Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  lead            Lead          @relation(fields: [leadId], references: [id])
  leadId          String        @unique
}

model Activity {
  id          String         @id @default(uuid())
  type        ActivityType
  scheduledAt DateTime
  status      ActivityStatus
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  lead        Lead           @relation(fields: [leadId], references: [id])
  leadId      String
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

enum ActivityType {
  Call
  Email
  Meeting
  Visit
}

enum ActivityStatus {
  Pending
  Completed
}

model File {
  id          String     @id @default(uuid())
  url         String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
  createdAt   DateTime   @default(now())
}

model LeadProperty {
  id         String   @id @default(uuid())
  lead       Lead     @relation(fields: [leadId], references: [id])
  leadId     String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String

  @@unique([leadId, propertyId])
}

model Notification {
  id       String               @id @default(uuid())
  title    String
  message  String
  type     NotificationType
  category NotificationCategory
  priority NotificationPriority @default(MEDIUM)
  status   NotificationStatus   @default(UNREAD)
  isRead   Boolean              @default(false)
  readAt   DateTime?

  // Related entity references (optional)
  relatedEntityType String? // 'lead', 'property', 'deal', 'user', 'activity'
  relatedEntityId   String? // ID of the related entity

  // Action buttons for notifications
  actionButtons Json? // Array of action button objects

  // Notification metadata
  metadata Json? // Additional data for the notification

  // Relationships
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  // Optional: who triggered this notification
  triggeredBy   User?   @relation("NotificationTriggeredBy", fields: [triggeredById], references: [id])
  triggeredById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, status])
  @@index([workspaceId, createdAt])
  @@index([type, category])
}

// Notification types for different CRM events
enum NotificationType {
  LEAD_ASSIGNED
  LEAD_STAGE_CHANGED
  LEAD_PRIORITY_CHANGED
  LEAD_FOLLOW_UP_REMINDER
  LEAD_CONVERTED_TO_DEAL

  PROPERTY_LISTED
  PROPERTY_PRICE_CHANGED
  PROPERTY_STATUS_CHANGED
  PROPERTY_VIEWING_SCHEDULED
  PROPERTY_IMAGES_UPLOADED

  DEAL_CREATED
  DEAL_STAGE_CHANGED
  DEAL_CLOSED
  DEAL_NEGOTIATION_UPDATE

  USER_INVITED
  USER_JOINED
  USER_ROLE_CHANGED
  USER_LEFT_WORKSPACE

  ACTIVITY_SCHEDULED
  ACTIVITY_REMINDER
  ACTIVITY_COMPLETED

  WORKSPACE_SETTINGS_UPDATED
  SYSTEM_ALERT
  SUBSCRIPTION_UPDATE
}

// Notification categories for grouping
enum NotificationCategory {
  LEADS
  PROPERTIES
  DEALS
  USERS
  ACTIVITIES
  WORKSPACE
}

// Notification priority levels
enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Notification read status
enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

model WorkspaceSettings {
  id                  String    @id @default(uuid())
  workspace           Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId         String    @unique
  onboardingCompleted Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// User notification preferences
model UserNotificationPreferences {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  // Email notification preferences
  emailNotifications Boolean @default(true)

  // Category-specific preferences
  leadNotifications     Boolean @default(true)
  propertyNotifications Boolean @default(true)
  dealNotifications     Boolean @default(true)
  userNotifications     Boolean @default(true)
  activityNotifications Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Workspace-level notification settings
model WorkspaceNotificationSettings {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id                   String     @id @default(cuid())
  workspaceId          String?    @unique
  workspace            Workspace? @relation(fields: [workspaceId], references: [id])
  planId               String?
  plan                 Plan?      @relation(fields: [planId], references: [id])
  isActive             Boolean    @default(true)
  customerId           String?
  subscriptionId       String?
  currentPeriodEndDate DateTime?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

enum PlanType {
  Basic
  Standard
  Pro
}

enum PlanDuration {
  monthly
  yearly
}

model Plan {
  id            String         @id @default(cuid())
  name          String
  price         Float
  duration      PlanDuration
  features      String[] // array of feature names
  stripePriceId String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ChatMessage {
  id          String        @id @default(uuid())
  content     String
  messageType MessageType   @default(TEXT)
  sender      User          @relation(fields: [senderId], references: [id])
  senderId    String
  receiver    User?         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId  String?
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])
  workspaceId String
  status      MessageStatus @default(SENT)
  readAt      DateTime?
  attachments Json?
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isDeleted   Boolean       @default(false)
  deletedAt   DateTime?

  @@index([workspaceId, createdAt])
  @@index([senderId, receiverId])
  @@index([workspaceId, senderId, receiverId])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  PROPERTY_SHARE
  SYSTEM
}

enum MessageStatus {
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
}
